package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate jpred;
    private DbIterator child1;
    private DbIterator child2;

    // this is used in case fetchNext returns a viable tuple, but the correct one is later
    // in child2
    private Tuple currTuple;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.jpred = p;
        this.child1 = child1;
        this.child2 = child2;
        this.currTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return jpred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(jpred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(jpred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {

        // run through every left tuple and make sure to run through every right tuple for
        // the last left tuple
        while (child1.hasNext() || currTuple != null)
        {
            Tuple left;

            // if we've cycled through entire right set for the last left tuple, get next left
            if (currTuple == null) {
                 left = child1.next();
                currTuple = left;
            }
            // otherwise, continue using same left tuple
            else
            {
                left = currTuple;
            }

            while (child2.hasNext())
            {
                Tuple right = child2.next();
                if (jpred.filter(left,right))
                {
                    Tuple t = new Tuple(this.getTupleDesc());
                    int num = 0;
                    for (int i=0; i < left.getTupleDesc().numFields(); i++)
                    {
                        t.setField(num++,left.getField(i));
                    }
                    for (int j=0; j < right.getTupleDesc().numFields(); j++)
                    {
                        t.setField(num++,right.getField(j));
                    }

                    return t;
                }
            }

            // restart 2nd iterator for each time through 1st iterator
            child2.rewind();
            // reset currTuple as no viable tuple was found
            currTuple = null;
        }

        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = {child1,child2};

        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        children[0] = child1;
        children[1] = child2;
    }

}
